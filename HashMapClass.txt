package Collections;

import androidx.annotation.NonNull;

public  class Hashmap<K,V> implements mapInterface<K,V> {
    private class KeyValuePair<K,V>{
        int hash_value ;
        K key;
        V value;
        int size = 0;
        KeyValuePair[] Same_index_Keys = new KeyValuePair[16];
        public KeyValuePair(int hashValue,K key,V value){
            this.hash_value = hashValue;
            this.key = key;
            this.value = value;
        }
        public KeyValuePair[] extendSizeOfArray(KeyValuePair[] actualArray, int size) {
            KeyValuePair[] NewSizeArrayElement = new KeyValuePair[size];
            for(int index = 0 ;index < actualArray.length;index++) {
                NewSizeArrayElement[index] = actualArray[index];
            }
            return NewSizeArrayElement;
        }
        public void SameIndexKeyArray(KeyValuePair NextValue){
            Same_index_Keys[size] = NextValue;
            size++;
            if(size == Same_index_Keys.length) {
                Same_index_Keys = extendSizeOfArray(Same_index_Keys, Same_index_Keys.length * 2);
            }
        }
    }
    private KeyValuePair[] pairElement = {};
    private KeyValuePair<K,V> keyobject;
    private int size = 0;
    private int default_sizee = 16;
    public Hashmap(){
        this.pairElement = new KeyValuePair[16];
    }
    public Hashmap(int size){
        this.pairElement = new KeyValuePair[size];
        this.default_sizee = size;
    }
    @NonNull
    @Override
    public String toString() {
        String HashString = "{\n";
        for (int index = 0 ;index < pairElement.length;index++){
            if (pairElement[index] != null) {
                if (pairElement[index].Same_index_Keys.length == 0) {
                    HashString += pairElement[index].key + " : " + pairElement[index].value + "\n";
                } else {
                    HashString += pairElement[index].key + " : " + pairElement[index].value + "\n";
                    for (KeyValuePair sameIndexArray : pairElement[index].Same_index_Keys) {
                        if(sameIndexArray != null){
                            HashString += sameIndexArray.key + " : " + sameIndexArray.value + "\n";
                        }
                    }
                }
            }
        }
        return HashString +="}";
    }
    public int hash(Object key){
        String keyToString = String.valueOf(key);
        int sumOfAscii = 0;
        switch (keyToString.length()){
            case 1:
                sumOfAscii += keyToString.charAt(0);
                break;
            case 2:
                sumOfAscii += keyToString.charAt(0) + keyToString.charAt(1);
                break;
            case 3:
                sumOfAscii += keyToString.charAt(0) + keyToString.charAt(1) + keyToString.charAt(2);
                break;
            default:
                sumOfAscii += keyToString.charAt(0) + keyToString.charAt(1) + keyToString.charAt(2) + keyToString.charAt(3);
        }
        return sumOfAscii;
    }
    public int IndexOf(K key,int hash_value){
        int idx = 0;
        int index = hash_value % (default_sizee);
        return index;
    }
    public void updateValue(K key,V value) {
        int hash_value = hash(key);
        int index = IndexOf(key,hash_value);
        if(pairElement[index] != null) {
            if (key.equals(pairElement[index].key)) {
                pairElement[index].value = value;
            } else {
                for (KeyValuePair sameIndexArray : pairElement[index].Same_index_Keys) {
                    if (sameIndexArray != null) {
                        if (key.equals(sameIndexArray.key)) {
                            sameIndexArray.value = value;
                            break;
                        }
                    }
                }
            }
        }
    }
    public boolean ifExist(K key){
        boolean existststus = false;
        int hashValue = hash(key);
        int index = hashValue % (default_sizee);
        if(pairElement[index] != null) {
            if (key.equals(pairElement[index].key)) {
                existststus = true;
            } else {
                for (KeyValuePair sameIndexArray : pairElement[index].Same_index_Keys) {
                    if (sameIndexArray != null) {
                        if (key.equals(sameIndexArray.key) ) {
                            return true;
                        }
                    }
                }
            }
        }
        return existststus;
    }
    public void put(K key,V value) {
        int hash_value = hash(key);
        keyobject = new KeyValuePair<K,V>(hash_value,key,value);
        int index = IndexOf(key,hash_value);
        if(pairElement[index] != null)
        {
            if(ifExist(key)){
                updateValue(key,value);
            }
            else{
                pairElement[index].SameIndexKeyArray(keyobject);
                size++;
            }
        }
        else{
            pairElement[index] = keyobject;
            size++;
        }
    }
    public int Mapsize(){
            return this.size;
    }
    public void clearArrayValue(){
        for (int index = 0 ;index < pairElement.length;index++){
            pairElement[index] = null;
            this.size = 0;
        }
    }
    public V get(K key) throws NullPointerException{
        int hashValue = hash(key);
        int index = IndexOf(key,hashValue);
        if(pairElement[index] != null ) {
            if (pairElement[index].hash_value == hashValue && key.equals(pairElement[index].key)) {
                return (V) pairElement[index].value;
            } else {
                for (KeyValuePair sameIndexArray : pairElement[index].Same_index_Keys) {
                    if(sameIndexArray != null) {
                        if (sameIndexArray.hash_value == hashValue && key.equals(sameIndexArray.key)) {
                            return (V) (sameIndexArray.value);
                        }
                    }
                }
            }
        }
        return  null;
    }
    public Object[] getKey(){
        Object[] keyArray = getKeyValue("key");
        return keyArray;
    }
    public Object[] getValue(){
        Object[] valueArray = getKeyValue("value");
        return valueArray;
    }
    public Object[] getKeyValue(Object status){
        Object[] keyValueArray = new Object[this.size];
        int sizeindex = 0;
        for (int index = 0 ;index < pairElement.length;index++){
            if (pairElement[index] != null) {
                if (pairElement[index].Same_index_Keys.length == 0) {
                    if(status == "key"){
                        keyValueArray[sizeindex] = pairElement[index].key ;
                    }
                    else {
                        keyValueArray[sizeindex] = pairElement[index].value ;
                    }
                    sizeindex++;
                } else {
                    if(status == "key"){
                        keyValueArray[sizeindex] = pairElement[index].key ;
                    }
                    else {
                        keyValueArray[sizeindex] = pairElement[index].value ;
                    }
                    sizeindex++;
                    for (KeyValuePair sameIndexArray : pairElement[index].Same_index_Keys) {
                        if(sameIndexArray != null){
                            if(status == "key"){
                                keyValueArray[sizeindex] = sameIndexArray.key ;
                            }
                            else {
                                keyValueArray[sizeindex] = sameIndexArray.value ;
                            }
                            sizeindex++;
                        }
                    }
                }
            }
        }
        return keyValueArray;
    }

}
